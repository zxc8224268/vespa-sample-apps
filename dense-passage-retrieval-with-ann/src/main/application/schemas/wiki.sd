# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

schema wiki {

  document wiki {

    field title type string {
      indexing: summary | index
      index: enable-bm25
    }

    field title_token_ids type tensor<float>(d0[256]) {
        indexing: summary | attribute
    }

    field text type string {
      indexing: summary | index
      index: enable-bm25
    }

    field text_token_ids type tensor<float>(d0[256]) {
      indexing: summary |attribute
    }

    field id type long {
      indexing: summary |attribute
    }

    field text_embedding type tensor<float>(x[769]){
      indexing: attribute|index
      attribute {
        distance-metric:euclidean
      }
      index {
        hnsw {
          max-links-per-node: 32
          neighbors-to-explore-at-insert: 500
        }
      }
    }

  }

  fieldset default {
    fields: title, text
  }

  onnx-model reader {
    file: models/reader.onnx
    input  input_ids: input_ids
    input  attention_mask: attention_mask
    output output_0: start_logits
    output output_1: end_logits
    output output_2: relevance_logits
  }

  rank-profile openqa {

    inputs {
      query(query_embedding) tensor<float>(x[769])
      query(query_token_ids) tensor<float>(d0[32])
    }

    function input_ids() {
      expression: tokenInputIds(128, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }

    function token_type_ids() {
      expression: tokenTypeIds(128, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }

    function attention_mask() {
      expression: tokenAttentionMask(128, query(query_token_ids), attribute(title_token_ids), attribute(text_token_ids))
    }

    first-phase {
      expression: closeness(field, text_embedding)
    }

    second-phase {
      rerank-count: 5
      expression: sum(onnxModel(reader).relevance_logits)
    }

    match-features {
      onnx(reader).start_logits
      onnx(reader).end_logits
      input_ids # The input sequence with special tokens (CLS/SEP)
    }

  }

  rank-profile sparse inherits openqa {
    first-phase {
      expression: bm25(text) + bm25(title)
    }
  }

  rank-profile dense inherits openqa {
    first-phase {
      expression: closeness(field, text_embedding)
    }
  }

  rank-profile hybrid inherits openqa {
    num-threads-per-search: 1
    first-phase {
      expression: 1000*closeness(field, text_embedding) + bm25(text) + bm25(title)
    }
  }

  # The following rank profiles are used for retrieval only, i.e. they don't invoke the reader

  rank-profile sparse-retriever  {
    first-phase {
      expression: bm25(text) + bm25(title)
    }
  }

  rank-profile dense-retriever {
    inputs {
      query(query_embedding) tensor<float>(x[769])
    }

    num-threads-per-search: 1
    first-phase {
      expression: closeness(field, text_embedding)
    }
  }

  rank-profile hybrid-retriever {
    inputs {
      query(query_embedding) tensor<float>(x[769])
    }

    num-threads-per-search: 1
    first-phase {
      expression: 1000*closeness(field, text_embedding) + bm25(text) + bm25(title)
    }
  }

}
