# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

schema passage {

  document passage {

    field text type string {
      indexing: summary | index
      index: enable-bm25
    }

    field dt type tensor<bfloat16>(dt{}, x[32]){
      indexing: summary | attribute
      attribute: fast-rank
    }

    field mini_document_embedding type tensor<float>(d0[384]) {
      indexing: attribute | index
      attribute {
        distance-metric: innerproduct
      }
      index {
        hnsw {
          max-links-per-node: 16
          neighbors-to-explore-at-insert: 200
        }
      }
    }

    field id type long {
      indexing: summary |attribute
      attribute: fast-search
      dictionary: hash
    }

  }

  field text_token_ids type tensor<float>(d0[128])  {
    indexing: input text | embed tokenizer | attribute | summary
    attribute: paged
  }

  document-summary id {
    summary id type long {
      source:id 
    }
  }

  document-summary text_token_ids {
    summary text_token_ids type tensor<float>(d0[128]) {
      source:text_token_ids
    }
  }

  fieldset default {
    fields: text
  }

  onnx-model minilmranker {
    file: models/msmarco_v2.onnx
    input input_ids: input_ids
    input attention_mask: attention_mask
    input token_type_ids: token_type_ids
  }

  rank-profile bm25 {
    num-threads-per-search: 6
    first-phase {
      expression: bm25(text)
    }
  }

  rank-profile bm25-colbert inherits bm25 {
    inputs {
      query(qt) tensor<float>(qt{},x[32])
    }
    num-threads-per-search: 6
    second-phase {
      rerank-count: 1000
      expression {
        sum(
          reduce(
            sum(
              query(qt) * cell_cast(attribute(dt), float) , x
            ),
            max, dt
          ),
          qt
        )
      }
    }
  }

  rank-profile dense {
    inputs {
      query(query_embedding) tensor<float>(d0[384])
    }
    num-threads-per-search: 1
    first-phase {
        expression: closeness(field, mini_document_embedding)
    }
  }

  rank-profile dense-colbert {
    inputs {
      query(qt) tensor<float>(qt{},x[32])
      query(query_embedding) tensor<float>(d0[384])
    }
    num-threads-per-search: 1
    first-phase {
      expression: closeness(field, mini_document_embedding)
    }
    second-phase {
      rerank-count: 1000
      expression {
        sum(
          reduce(
            sum(
              query(qt) * cell_cast(attribute(dt), float) , x
            ),
            max, dt
          ),
          qt
        )
      }
    }
  }

  rank-profile dense-colbert-mini-lm {
    inputs {
      query(qt) tensor<float>(qt{},x[32])
      query(query_embedding) tensor<float>(d0[384])
      query(query_token_ids) tensor<float>(d0[32])
    }
    num-threads-per-search: 24

    function input_ids() {
        expression: tokenInputIds(128, query(query_token_ids), attribute(text_token_ids))
    }

    function token_type_ids() {
      expression: tokenTypeIds(128, query(query_token_ids), attribute(text_token_ids))
    }

    function attention_mask() {
      expression: tokenAttentionMask(128, query(query_token_ids), attribute(text_token_ids))
    }

    # Max score is 32 * 1.0
    function maxSimNormalized() {
      expression {
        sum(
          reduce(
            sum(
              query(qt) * attribute(dt), x
            ),
            max, dt
          ),
          qt
        )/32.0
       }
    }
    function dense() {
      expression: closeness(field, mini_document_embedding)
    }

    function crossModel() {
      expression: onnx(minilmranker){d0:0,d1:0}
    }

    first-phase {
        expression: maxSimNormalized()
    }

    second-phase {
      rerank-count: 24
      expression: 0.2*crossModel() + 1.1*maxSimNormalized() + 0.8*dense()
    }
  }

}
